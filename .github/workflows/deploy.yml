name: Deploy to EC2

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: read

env:
  EC2_HOST: ec2-3-144-26-35.us-east-2.compute.amazonaws.com   # tu host actual
  EC2_USER: ${{ secrets.EC2_USER }}
  APP_DIR: /home/ubuntu/SmartFocus
  IMAGE_NAME: ghcr.io/inakimerino0/smartfocus-backend
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      - name: Generate .env (from Secrets)
        run: |
          : > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}" >> .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env

      - name: Rsync code (exclude local .env/.git)
        run: |
          rsync -az --delete \
            --exclude='.git' --exclude='.env' \
            -e "ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes" \
            ./ "$EC2_USER@$EC2_HOST:$APP_DIR/"

      - name: Upload .env
        run: |
          scp -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes ./.env \
            "$EC2_USER@$EC2_HOST:$APP_DIR/.env"

      - name: Compose pull / build & up
        run: |
          ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes "$EC2_USER@$EC2_HOST" "
            set -e
            cd $APP_DIR
            docker compose pull || true       # si usás imagen GHCR
            # docker compose build --pull      # si preferís build local del backend, descomenta
            docker compose up -d --remove-orphans
            docker compose ps
          "



