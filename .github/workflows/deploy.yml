name: Deploy to EC2 (GHCR)

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/inakimerino0/smartfocus-backend
  EC2_HOST: ec2-18-116-90-219.us-east-2.compute.amazonaws.com
  EC2_USER: ubuntu
  REMOTE_APP_DIR: /home/ubuntu/SmartFocus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (context ./backend)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 🔐 Crear clave privada temporal para conectar al EC2
      - name: Setup SSH key + known_hosts
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "$EC2_SSH_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan -H "${{ env.EC2_HOST }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # 📦 Subir docker-compose.yml al servidor
      - name: Upload docker-compose.yml to EC2
        run: |
          ssh -i ~/.ssh/ec2_key -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "mkdir -p '${{ env.REMOTE_APP_DIR }}'"
          scp -i ~/.ssh/ec2_key -o IdentitiesOnly=yes \
            docker-compose.yml \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.REMOTE_APP_DIR }}/docker-compose.yml"

      # 🌱 (Opcional) crear .env en el servidor desde secrets
      - name: (Optional) Update .env on EC2 from secrets
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          ssh -i ~/.ssh/ec2_key -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "bash -lc 'cat > \"${{ env.REMOTE_APP_DIR }}/.env\" << EOF
          DB_USER=${DB_USER}
          DB_PASS=${DB_PASS}
          DB_NAME=${DB_NAME}
          EOF'"

      # 🚀 Desplegar
      - name: SSH & Deploy
        run: |
          ssh -i ~/.ssh/ec2_key -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" bash -s << 'EOSSH'
          set -euo pipefail
          cd "${REMOTE_APP_DIR:-/home/ubuntu/SmartFocus}"

          echo ">>> Logging in to GHCR..."
          echo "${GHCR_TOKEN:-${GITHUB_TOKEN}}" | docker login ghcr.io -u "${GHCR_USER:-${GITHUB_ACTOR}}" --password-stdin

          export IMAGE_TAG="${IMAGE_TAG:-${GITHUB_SHA}}"
          echo ">>> Deploying image: ghcr.io/inakimerino0/smartfocus-backend:$IMAGE_TAG"

          docker compose pull backend
          docker compose up -d --remove-orphans

          cid="$(docker compose ps -q backend || true)"
          if [ -n "$cid" ]; then
            img_id="$(docker inspect -f '{{.Image}}' "$cid")"
            echo ">>> Container running image: $img_id"
          fi

          docker image prune -f || true
          EOSSH
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
