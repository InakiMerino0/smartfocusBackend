name: Deploy to EC2

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write   # 🆕 antes estaba "read"; para push a GHCR necesitamos "write"

env:
  EC2_HOST: ec2-18-116-90-219.us-east-2.compute.amazonaws.com
  EC2_USER: ${{ secrets.EC2_USER }}
  APP_DIR: /home/ubuntu/SmartFocus
  IMAGE_NAME: ghcr.io/inakimerino0/smartfocus-backend
  IMAGE_TAG: latest   # lo dejamos, pero abajo vamos a usar el SHA

# 🆕 Job nuevo: build & push de la imagen a GHCR con tag inmutable (SHA)
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push (tag = SHA)
        run: |
          docker build \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    needs: build_and_push   # 🆕 desplegar solo si el build fue OK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts

      # ⬇️ Pequeño ajuste: escribimos IMAGE_TAG con el SHA actual (no "latest")
      - name: Generate .env (from Secrets)
        run: |
          : > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}" >> .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo "IMAGE_TAG=${{ github.sha }}" >> .env   # 🆕 aquí el cambio clave
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env

      - name: Rsync code (exclude local .env/.git)
        run: |
          rsync -az --delete \
            --exclude='.git' --exclude='.env' \
            -e "ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes" \
            ./ "$EC2_USER@$EC2_HOST:$APP_DIR/"

      - name: Upload .env
        run: |
          scp -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes ./.env \
            "$EC2_USER@$EC2_HOST:$APP_DIR/.env"

      - name: Compose pull / build & up
        env:
          SHA: ${{ github.sha }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes "$EC2_USER@$EC2_HOST" "
            set -e
            cd $APP_DIR

            # ✅ bajamos exactamente la imagen que acabamos de publicar
            docker compose pull backend || true

            # ✅ recreamos solo backend con esa imagen (evita quedarse con el contenedor viejo)
            docker compose up -d --no-deps --force-recreate backend

            docker compose ps
          "
