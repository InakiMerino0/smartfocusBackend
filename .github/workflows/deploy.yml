name: Deploy to EC2 (GHCR)

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/inakimerino0/smartfocus-backend
  EC2_HOST: ec2-18-116-90-219.us-east-2.compute.amazonaws.com
  EC2_USER: ubuntu
  REMOTE_APP_DIR: /home/ubuntu/SmartFocus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image (context ./backend)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (to upload compose)
        uses: actions/checkout@v4

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ env.EC2_HOST }}" >> ~/.ssh/known_hosts
          chmod 700 ~/.ssh

      - name: Ensure remote dir + upload docker-compose.yml
        run: |
          ssh -i "${{ secrets.EC2_SSH_KEY }}" -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "mkdir -p '${REMOTE_APP_DIR}'"
          scp -i "${{ secrets.EC2_SSH_KEY }}" -o IdentitiesOnly=yes \
            docker-compose.yml \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.REMOTE_APP_DIR }}/docker-compose.yml"

      # Si NO querés tocar tu .env remoto, borrá este step.
      - name: (Optional) Update .env on EC2 from secrets
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          ssh -i "${{ secrets.EC2_SSH_KEY }}" -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "bash -lc 'cat > \"${REMOTE_APP_DIR}/.env\" << EOF
          DB_USER=${DB_USER}
          DB_PASS=${DB_PASS}
          DB_NAME=${DB_NAME}
          EOF'"

      - name: SSH & Deploy
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh -i "${{ secrets.EC2_SSH_KEY }}" -o IdentitiesOnly=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" bash -s << 'EOSSH'
          set -euo pipefail
          cd "${REMOTE_APP_DIR}"

          echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin

          export IMAGE_TAG="${IMAGE_TAG}"

          docker compose pull backend
          docker compose up -d --remove-orphans

          cid="$(docker compose ps -q backend || true)"
          if [ -n "$cid" ]; then
            echo ">> Container ID: $cid"
            img_id="$(docker inspect -f '{{.Image}}' "$cid")"
            echo ">> Image ID: $img_id"
            docker image inspect "$img_id" --format 'ID={{.Id}} Labels={{json .Config.Labels}}' || true
          fi

          # Quick check (ajusta a /ready si lo tenés)
          curl -fsS http://127.0.0.1:8000/docs >/dev/null || true

          docker image prune -f || true
          EOSSH
