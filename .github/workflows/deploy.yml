name: Deploy to EC2

on:
  push:
    branches: ["main"]

# El GITHUB_TOKEN necesita permiso para publicar a GHCR
permissions:
  contents: read
  packages: write

env:
  # HARD-CODEA tu DNS/IP pÃºblica de EC2
  EC2_HOST: ec2-18-116-90-219.us-east-2.compute.amazonaws.com
  EC2_USER: ubuntu
  # Usuario SSH (Ubuntu suele ser 'ubuntu'); si preferÃ­s, tomalo de secrets

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Forzar nombre de imagen en minÃºsculas (GHCR lo exige)
      - name: Compute lowercase IMAGE_NAME
        run: |
          echo "IMAGE_NAME=$(echo ghcr.io/${{ github.repository_owner }}/smartfocus-backend | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # ---------- CI: Build & Push a GHCR ----------
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      # ---------- CD: Deploy en EC2 ----------
      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ env.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Write SSH key from EC2_SSH_KEY (fix CRLF + perms)
        run: |
          mkdir -p ~/.ssh
          # ðŸ”§ Elimina \r por si el secret se pegÃ³ con formato Windows
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # (Opcional temporal) Debug del login para ver por quÃ© falla
      - name: Test SSH connectivity (verbose)
        run: |
          ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes -vvv \
          ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "echo 'SSH OK'"

      - name: Generate .env from Secrets
        run: |
          cat > .env << 'EOF'
          # ====== Database ======
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_HOST=db
          DB_PORT=5432
          DB_NAME=${{ secrets.DB_NAME }}

          # ====== App / Auth ======
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=120

          # ====== Gemini ======
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL=
          EOF

      - name: Copy .env to EC2
        run: |
          scp -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes \
            .env ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/SmartFocus/.env

      - name: Remote deploy (pull & up, fix perms, prune)
        run: |
          ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=yes \
            "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" bash -s <<EOF
          set -euo pipefail

          # Variables INYECTADAS desde el runner (GH actÃºa aquÃ­)
          export GHCR_USER='InakiMerino0'
          export GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}'
          export IMAGE_NAME='${{ env.IMAGE_NAME }}'
          export GITHUB_SHA='${{ github.sha }}'

          mkdir -p /home/${USER}/SmartFocus
          cd /home/${USER}/SmartFocus

          # Asegurar permisos del .env (si existe)
          chmod 600 .env || true
          chown ${USER}:${USER} .env || true

          # Login a GHCR con token de SOLO LECTURA
          echo "\$GHCR_TOKEN" | docker login ghcr.io -u "\$GHCR_USER" --password-stdin

          # Tag inmutable (por commit)
          export IMAGE_TAG="sha-\$GITHUB_SHA"

          # Actualizar backend sin build en servidor
          docker compose pull backend
          docker compose up -d --remove-orphans

          # Limpieza controlada (solo recursos no usados)
          docker container prune -f
          docker image prune -a -f
          docker network prune -f
          EOF